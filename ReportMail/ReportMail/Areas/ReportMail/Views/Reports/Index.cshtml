@using System.Linq
@using System.Collections.Generic
@using ReportMail.Data.Entities
@{
    ViewData["Title"] = "報表主頁";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // === 後端 API ===
    var apiLine = Url.Action("Line", "Reports", new { area = "ReportMail" }) ?? "#";
    var apiBar = Url.Action("Bar", "Reports", new { area = "ReportMail" }) ?? "#";
    var apiPie = Url.Action("Pie", "Reports", new { area = "ReportMail" }) ?? "#";
    var apiDefPayload = Url.Action("DefinitionPayload", "ReportDefinitions", new { area = "ReportMail" }) ?? "#";
    var apiPreview = Url.Action("PreviewDraft", "ReportPreview", new { area = "ReportMail" }) ?? "#";

    // 新增/編輯/刪除的頁面
    var urlCreateDef = Url.Action("Create", "ReportDefinitions", new { area = "ReportMail" }) ?? "#";
    var urlEditDefBase = Url.Action("Edit", "ReportDefinitions", new { area = "ReportMail" }) ?? "#"; // 之後 + /{id}
    var urlDelDefBase = Url.Action("Delete", "ReportDefinitions", new { area = "ReportMail" }) ?? "#"; // 之後 + /{id}

    // === 自訂報表清單 ===
    var lineList = ViewBag.LineReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
    var barList = ViewBag.BarReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
    var pieList = ViewBag.PieReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
}

<div class="container-fluid py-3">
    <h1 class="mb-4">報表主頁</h1>

    <!-- ===== 折線圖卡片 ===== -->
    <div class="card mb-4">
        <div class="card-header d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-2">
                <span class="fw-bold">折線圖</span>
                <select id="ddlLine" class="form-select form-select-sm" style="min-width:280px;">
                    <option value="">（預設報表）近30日每日銷售金額</option>
                    @foreach (var d in lineList)
                    {
                        <option value="@d.ReportDefinitionID">@d.ReportName</option>
                    }
                </select>
            </div>
            <div class="d-flex gap-2">
                <button id="btnExportLine" class="btn btn-sm btn-success">匯出</button>
                <a class="btn btn-sm btn-primary" href="@urlCreateDef">新增</a>
                <button id="btnEditLine" class="btn btn-sm btn-outline-secondary">編輯</button>
                <button id="btnDelLine" class="btn btn-sm btn-outline-danger">刪除</button>
            </div>
        </div>
        <div class="card-body">
            <canvas id="chartLine" height="140"></canvas>
            <div class="text-muted small mt-2"></div>
        </div>
    </div>

    <div class="row g-4">
        <!-- ======= 長條圖 ======= -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center gap-2">
                        <span class="fw-bold">長條圖</span>
                        <select id="ddlBar" class="form-select form-select-sm" style="min-width:280px;">
                            <option value="">（預設報表）近30日書籍銷售Top10</option>
                            @foreach (var d in barList)
                            {
                                <option value="@d.ReportDefinitionID">@d.ReportName</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-2">
                        <button id="btnExportBar" class="btn btn-sm btn-success">匯出</button>
                        <a class="btn btn-sm btn-primary" href="@urlCreateDef">新增</a>
                        <button id="btnEditBar" class="btn btn-sm btn-outline-secondary">編輯</button>
                        <button id="btnDelBar" class="btn btn-sm btn-outline-danger">刪除</button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="chartBar" height="140"></canvas>
                    <div class="text-muted small mt-2"></div>
                </div>
            </div>
        </div>

        <!-- ======= 圓餅圖 ======= -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center gap-2">
                        <span class="fw-bold">圓餅圖</span>
                        <select id="ddlPie" class="form-select form-select-sm" style="min-width:280px;">
                            <option value="">（預設報表）近30日書籍借閱種類Top5</option>
                            @foreach (var d in pieList)
                            {
                                <option value="@d.ReportDefinitionID">@d.ReportName</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-2">
                        <a class="btn btn-sm btn-primary" href="@urlCreateDef">新增</a>
                        <button id="btnEditPie" class="btn btn-sm btn-outline-secondary">編輯</button>
                        <button id="btnDelPie" class="btn btn-sm btn-outline-danger">刪除</button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="chartPie" height="140"></canvas>
                    <div class="text-muted small mt-2">
                        @*提示：選擇「自訂報表」會即時更新圖表；選「（預設報表）」回到寫死的預設資料。*@
                    </div>
                </div>
            </div>
        </div>
    </div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // === 全局狀態 ===
        window._lineChart = window._lineChart || null;
        window._barChart  = window._barChart  || null;
        window._pieChart  = window._pieChart  || null;

        // 折線：BaseKind / Granularity / Metric
        window._lineBaseKind    = window._lineBaseKind    ?? 'sales';
        window._lineGranularity = window._lineGranularity ?? 'day';
        window._lineValueMetric = window._lineValueMetric ?? 'amount';

        // 長條：BaseKind / Metric
        window._barBaseKind     = window._barBaseKind     ?? 'sales';
        window._barValueMetric  = window._barValueMetric  ?? 'quantity';

        // 圓餅：BaseKind / Metric
        window._pieBaseKind     = window._pieBaseKind     ?? 'borrow';
        window._pieValueMetric  = window._pieValueMetric  ?? 'count';

        // === Chart render ===
        function renderLine(labels, data, title){
          const el = document.getElementById('chartLine');
          if (!el) return;
          if (window._lineChart && typeof window._lineChart.destroy === 'function') window._lineChart.destroy();
          window._lineChart = new Chart(el, {
            type: 'line',
            data: { labels: labels || [], datasets: [{ label: title || '折線圖', data: data || [] }] },
            options: { responsive: true, tension: .25, scales: { y: { beginAtZero: true } } }
          });
        }

        // === 預設（寫死）折線圖：呼叫 ReportsController.Line 回傳的 JSON ===
        async function loadLine(){
          try{
            const res = await fetch('@apiLine', { cache: 'no-store' });
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            renderLine(json.labels, json.data, json.title || '預設折線圖');
          } catch (err) {
            console.error('loadLine failed:', err);
            renderLine([], [], '預設折線圖（載入失敗）');
          }
        }
        async function loadBar(){
          try{
            const res = await fetch('@apiBar', { cache: 'no-store' });
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            window._barBaseKind    = 'sales';
            window._barValueMetric = 'quantity';
            renderBar(json.labels||[], json.data||[], json.title||'預設長條圖');
          }catch(e){
            console.error(e); renderBar([], [], '預設長條圖（載入失敗）');
          }
        }
        async function loadPie(){
          try{
            const res = await fetch('@apiPie', { cache: 'no-store' });
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            window._pieBaseKind    = 'borrow';
            window._pieValueMetric = 'count';
            renderPie(json.labels||[], json.data||[], json.title||'預設圓餅圖');
          }catch(e){
            console.error(e); renderPie([], [], '預設圓餅圖（載入失敗）');
          }
        }

        // === 載入「自訂圖表」：先取定義，再呼叫預覽 ===
        // 以 id 讀取報表定義 → 呼叫預覽 → 畫圖
        // ======== 折線圖 ========
        async function loadLineByDefinition(defId) {
            try {
              // 1) 取報表定義（關快取 + 加時間戳）
              const defUrl = '@Url.Action("DefinitionPayload", "ReportDefinitions", new { area = "ReportMail" })'
                           + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
              const resDef = await fetch(defUrl, { cache: 'no-store' });
              if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
              const def = await resDef.json();
              console.debug('[Line] definition =', def);

              // 2) 來源類型（sales/borrow/orders）— 支援 camelCase / PascalCase
              const kind = ((def.baseKind ?? def.BaseKind) || '').toString().trim().toLowerCase();
              if (!['sales','borrow','orders'].includes(kind)) {
                console.error('BaseKind 缺失或不合法，definition=', def);
                alert('此報表缺少來源類型（sales/borrow/orders），請檢查定義。');
                return;
              }

              // 3) Filters — 支援 camelCase / PascalCase
              const defFilters = def.filters ?? def.Filters ?? [];

              const req = {
                Category: 'line',
                BaseKind: kind,
                Filters: (defFilters || []).map(f => ({
                  FieldName:    f.fieldName    ?? f.FieldName,
                  Operator:     f.operator     ?? f.Operator,
                  DataType:     f.dataType     ?? f.DataType,
                  ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
                  DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
                  Options:      f.options      ?? f.Options ?? null
                }))
              };
              console.debug('[Line] req =', req);

              // 4) 呼叫預覽（關快取 + 加時間戳）
              const prevUrl = '@Url.Action("PreviewDraft", "ReportPreview", new { area = "ReportMail" })'
                            + '?t=' + Date.now();
              const resPrev = await fetch(prevUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
                body: JSON.stringify(req),
                cache: 'no-store'
              });
              if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);

              const json = await resPrev.json();
              console.debug('[Line] echo =', json.echo);

              // 5) 畫圖
              renderLine(json.labels || [], json.data || [], json.title || '折線圖');
            } catch (err) {
              console.error('loadLineByDefinition failed:', err);
              renderLine([], [], '載入失敗');
            }
          }        // === 綁定：下拉切換、自訂報表的編輯/刪除導頁 ===
        (function bindLineUI(){
          const ddl     = document.getElementById('ddlLine');
          const btnEdit = document.getElementById('btnEditLine');
          const btnDel  = document.getElementById('btnDelLine');

          if (ddl){
            ddl.addEventListener('change', async (e)=>{
              const id = e.target.value;
              if (!id) await loadLine();               // 空值 → 預設
              else     await loadLineByDefinition(id); // 有選 → 自訂
            });
          }

          if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在折線圖下拉選擇一筆自訂報表'); return; }
              window.location.href = '@Url.Action("Edit", "ReportDefinitions", new { area = "ReportMail" })/' + id;
            });
          }

          if (btnDel){
            btnDel.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在下拉選擇要刪除的報表'); return; }
              window.location.href = '@Url.Action("Delete", "ReportDefinitions", new { area = "ReportMail" })/' + id;
            });
          }
        })();
        // ======== 長條圖 ========
        function renderBar(labels, data, title){
            const canvas = document.getElementById('chartBar');
            if (!canvas) return;
            if (window._barChart && typeof window._barChart.destroy === 'function') {
            window._barChart.destroy();
            }
            window._barChart = new Chart(canvas, {
            type: 'bar',
            data: { labels: labels || [], datasets: [{ label: title || '長條圖', data: data || [] }] },
            options: { responsive: true, scales: { y: { beginAtZero: true } } }
            });
        }

        // 預設長條圖（ReportsController.Bar）
        async function loadBar(){
            try{
            const res = await fetch('@apiBar');
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            renderBar(json.labels || [], json.data || [], json.title || '預設長條圖');
            }catch(err){
            console.error('loadBar failed:', err);
            renderBar([], [], '預設長條圖（載入失敗）');
            }
        }

        async function loadBarByDefinition(defId){
          try{
            const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
            const resDef = await fetch(defUrl, { cache: 'no-store' });
            if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
            const def = await resDef.json();

            const category = lower(def.category ?? def.Category);
            if (category !== 'bar'){ alert('此報表不是長條圖類型'); return; }
            const kind = lower(def.baseKind ?? def.BaseKind);
            window._barBaseKind = kind || 'sales';

            const defFilters = def.filters ?? def.Filters ?? [];
            trySyncMetricFromFilters(defFilters, m => { window._barValueMetric = m; });

            const req = {
              Category: 'bar',
              BaseKind: window._barBaseKind,
              Filters: (defFilters||[]).map(f => ({
                FieldName:    f.fieldName    ?? f.FieldName,
                Operator:     f.operator     ?? f.Operator,
                DataType:     f.dataType     ?? f.DataType,
                ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
                DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
                Options:      f.options      ?? f.Options ?? null
              }))
            };

            const resPrev = await fetch('@apiPreview' + '?t=' + Date.now(), {
              method: 'POST', headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
              body: JSON.stringify(req), cache: 'no-store'
            });
            if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);
            const json = await resPrev.json();

            if (json?.echo?.filters) {
              trySyncMetricFromFilters(json.echo.filters, m => { window._barValueMetric = m; });
            }

            let labels=[], data=[], title=json.title||'長條圖';
            if (Array.isArray(json.labels) && Array.isArray(json.data)) {
              labels = json.labels; data = json.data;
            } else {
              const s = json.series || json.Series || [];
              labels = s.map(p => p.label ?? p.name ?? '');
              data   = s.map(p => Number(p.value ?? p.y ?? 0));
            }
            renderBar(labels, data, title);
          }catch(err){
            console.error('loadBarByDefinition failed:', err);
            renderBar([], [], '載入失敗');
          }
        }

        (function bindBarUI(){
            const ddl     = document.getElementById('ddlBar');
            const btnEdit = document.getElementById('btnEditBar');
            const btnDel  = document.getElementById('btnDelBar');

            if (ddl){
            ddl.addEventListener('change', ()=>{
                const id = ddl.value || '';
                if (!id) loadBar(); else loadBarByDefinition(id);
            });
            }
            if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在長條圖下拉選擇一筆自訂報表'); return; }
                window.location.href = '@urlEditDefBase/' + id;
            });
            }
            if (btnDel){
            btnDel.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在長條圖下拉選擇一筆自訂報表'); return; }
                window.location.href = '@urlDelDefBase/' + id;
            });
            }
        })();

        // ======== 圓餅圖 ========
        function renderPie(labels, data, title){
            const canvas = document.getElementById('chartPie');
            if (!canvas) return;
            if (window._pieChart && typeof window._pieChart.destroy === 'function') {
            window._pieChart.destroy();
            }
            window._pieChart = new Chart(canvas, {
            type: 'pie',
            data: { labels: labels || [], datasets: [{ label: title || '圓餅圖', data: data || [] }] },
            options: { responsive: true }
            });
        }

        async function loadPie(){
            try{
            const res = await fetch('@apiPie');
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            renderPie(json.labels || [], json.data || [], json.title || '預設圓餅圖');
            }catch(err){
            console.error('loadPie failed:', err);
            renderPie([], [], '預設圓餅圖（載入失敗）');
            }
        }

        async function loadPieByDefinition(defId){
          try{
            const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
            const resDef = await fetch(defUrl, { cache: 'no-store' });
            if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
            const def = await resDef.json();

            const category = lower(def.category ?? def.Category);
            if (category !== 'pie'){ alert('此報表不是圓餅圖類型'); return; }
            const kind = lower(def.baseKind ?? def.BaseKind);
            window._pieBaseKind = kind || 'borrow';

            const defFilters = def.filters ?? def.Filters ?? [];
            trySyncMetricFromFilters(defFilters, m => { window._pieValueMetric = m; });

            const req = {
              Category: 'pie',
              BaseKind: window._pieBaseKind,
              Filters: (defFilters||[]).map(f => ({
                FieldName:    f.fieldName    ?? f.FieldName,
                Operator:     f.operator     ?? f.Operator,
                DataType:     f.dataType     ?? f.DataType,
                ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
                DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
                Options:      f.options      ?? f.Options ?? null
              }))
            };

            const resPrev = await fetch('@apiPreview' + '?t=' + Date.now(), {
              method: 'POST', headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
              body: JSON.stringify(req), cache: 'no-store'
            });
            if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);
            const json = await resPrev.json();

            if (json?.echo?.filters) {
              trySyncMetricFromFilters(json.echo.filters, m => { window._pieValueMetric = m; });
            }

            let labels=[], data=[], title=json.title||'圓餅圖';
            if (Array.isArray(json.labels) && Array.isArray(json.data)) {
              labels = json.labels; data = json.data;
            } else {
              const s = json.series || json.Series || [];
              labels = s.map(p => p.label ?? p.name ?? '');
              data   = s.map(p => Number(p.value ?? p.y ?? 0));
            }
            renderPie(labels, data, title);
          }catch(err){
            console.error('loadPieByDefinition failed:', err);
            renderPie([], [], '載入失敗');
          }
        }

        // === 綁定 ===
        (function bindLineUI(){
          const ddl = document.getElementById('ddlLine');
          const btnEdit = document.getElementById('btnEditLine');
          const btnDel  = document.getElementById('btnDelLine');
          if (ddl){
            ddl.addEventListener('change', async (e)=>{
              const id = e.target.value;
              if (!id) await loadLine(); else await loadLineByDefinition(id);
            });
          }
          if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在折線圖下拉選擇一筆自訂報表'); return; }
              window.location.href = '@urlEditDefBase/' + id;
            });
          }
          if (btnDel){
            btnDel.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在折線圖下拉選擇要刪除的報表'); return; }
              window.location.href = '@urlDelDefBase/' + id;
            });
          }
        })();

        (function bindBarUI(){
          const ddl = document.getElementById('ddlBar');
          const btnEdit = document.getElementById('btnEditBar');
          const btnDel  = document.getElementById('btnDelBar');
          if (ddl){
            ddl.addEventListener('change', ()=>{
              const id = ddl.value || '';
              if (!id) loadBar(); else loadBarByDefinition(id);
            });
          }
          if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在長條圖下拉選擇一筆自訂報表'); return; }
              window.location.href = '@urlEditDefBase/' + id;
            });
          }
          if (btnDel){
            btnDel.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在長條圖下拉選擇要刪除的自訂報表'); return; }
              window.location.href = '@urlDelDefBase/' + id;
            });
          }
        })();

        (function bindPieUI(){
          const ddl = document.getElementById('ddlPie');
          const btnEdit = document.getElementById('btnEditPie');
          const btnDel  = document.getElementById('btnDelPie');
          if (ddl){
            ddl.addEventListener('change', ()=>{
              const id = ddl.value || '';
              if (!id) loadPie(); else loadPieByDefinition(id);
            });
          }
          if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在圓餅圖下拉選擇一筆自訂報表'); return; }
              window.location.href = '@urlEditDefBase/' + id;
            });
          }
          if (btnDel){
            btnDel.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在圓餅圖下拉選擇一筆自訂報表'); return; }
                window.location.href = '@urlDelDefBase/' + id;
            });
          }
        })();

        // === 首次載入 ===
        document.addEventListener('DOMContentLoaded', ()=>{
            loadLine();
            loadBar();
            loadPie();
        });
    </script>


}
