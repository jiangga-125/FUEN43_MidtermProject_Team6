@using System.Linq
@using System.Collections.Generic
@using ReportMail.Data.Entities
@{
    ViewData["Title"] = "報表主頁";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // === 後端 API ===
    // 預設圖表資料
    var apiLine = Url.Action("Line", "Reports", new { area = "ReportMail" }) ?? "#";
    var apiBar = Url.Action("Bar", "Reports", new { area = "ReportMail" }) ?? "#";
    var apiPie = Url.Action("Pie", "Reports", new { area = "ReportMail" }) ?? "#";
    // 讀某個 ReportDefinition 的定義（Category/BaseKind/Filters(ValueJson)）
    var apiDefPayload = Url.Action("DefinitionPayload", "ReportDefinitions", new { area = "ReportMail" }) ?? "#";
    // 依 BaseKind+Filters 預覽資料（你專案現有的 ReportPreviewController.PreviewDraft）
    var apiPreview = Url.Action("PreviewDraft", "ReportPreview", new { area = "ReportMail" }) ?? "#";

    // 新增/編輯/刪除的頁面
    var urlCreateDef = Url.Action("Create", "ReportDefinitions", new { area = "ReportMail" }) ?? "#";
    var urlEditDefBase = Url.Action("Edit", "ReportDefinitions", new { area = "ReportMail" }) ?? "#"; // 之後 + /{id}
    var urlDelDefBase = Url.Action("Delete", "ReportDefinitions", new { area = "ReportMail" }) ?? "#"; // 之後 + /{id}

    // === 自訂報表清單 ===
    // ReportsController.Index
    var lineList = ViewBag.LineReports as IEnumerable<ReportDefinition>?? Enumerable.Empty<ReportDefinition>();
    var barList = ViewBag.BarReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
    var pieList = ViewBag.PieReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
}

<div class="container-fluid py-3">
    <h1 class="mb-4">報表主頁</h1>

    <!-- ===== 折線圖卡片（本題主角） ===== -->
    <div class="card mb-4">
        <div class="card-header d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center gap-2">
                <span class="fw-bold">折線圖</span>
                <!-- 下拉：第一個選項 = 預設報表；其餘為自訂報表 -->
                <select id="ddlLine" class="form-select form-select-sm" style="min-width:280px;">
                    <option value="">（預設報表）近30日每日銷售金額</option>
                    @foreach (var d in lineList)
                    {
                        <option value="@d.ReportDefinitionID">@d.ReportName</option>
                    }
                </select>
            </div>
            <div class="d-flex gap-2">
                <button id="btnExportLine" class="btn btn-sm btn-success">匯出</button>
                <!-- 新增固定導到 ReportDefinitions.Create（內頁選擇圖表類型與篩選） -->
                <a class="btn btn-sm btn-primary" href="@urlCreateDef">新增</a>
                <!-- 編輯/刪除：需要先在下拉選到某一筆 -->
                <button id="btnEditLine" class="btn btn-sm btn-outline-secondary">編輯</button>
                <button id="btnDelLine" class="btn btn-sm btn-outline-danger">刪除</button>
            </div>
        </div>
        <div class="card-body">
            <!-- ★ 必備：折線圖畫布 -->
            <canvas id="chartLine" height="140"></canvas>
            <div class="text-muted small mt-2">
                @*提示：選擇「自訂報表」會即時更新圖表；選「（預設報表）」回到寫死的預設資料。*@
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- ======= 長條圖 ======= -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center gap-2">
                        <span class="fw-bold">長條圖</span>
                        <!-- 下拉：第一個選項 = 預設報表；其餘為自訂報表（Category='bar'） -->
                        <select id="ddlBar" class="form-select form-select-sm" style="min-width:280px;">
                            <option value="">（預設報表）近30日書籍銷售Top10</option>
                            @foreach (var d in barList)
                            {
                                <option value="@d.ReportDefinitionID">@d.ReportName</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-2">
                        <button id="btnExportBar" class="btn btn-sm btn-success">匯出</button>
                        <a class="btn btn-sm btn-primary" href="@urlCreateDef">新增</a>
                        <button id="btnEditBar" class="btn btn-sm btn-outline-secondary">編輯</button>
                        <button id="btnDelBar" class="btn btn-sm btn-outline-danger">刪除</button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="chartBar" height="140"></canvas>
                    <div class="text-muted small mt-2">
                        @*提示：選擇「自訂報表」會即時更新圖表；選「（預設報表）」回到寫死的預設資料。*@
                    </div>
                </div>
            </div>
        </div>

        <!-- ======= 圓餅圖 ======= -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center gap-2">
                        <span class="fw-bold">圓餅圖</span>
                        <select id="ddlPie" class="form-select form-select-sm" style="min-width:280px;">
                            <option value="">（預設報表）近30日書籍借閱種類Top5</option>
                            @foreach (var d in pieList)
                            {
                                <option value="@d.ReportDefinitionID">@d.ReportName</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex gap-2">
                        <button id="btnExportPie" class="btn btn-sm btn-success">匯出</button>
                        <a class="btn btn-sm btn-primary" href="@urlCreateDef">新增</a>
                        <button id="btnEditPie" class="btn btn-sm btn-outline-secondary">編輯</button>
                        <button id="btnDelPie" class="btn btn-sm btn-outline-danger">刪除</button>
                    </div>
                </div>
                <div class="card-body">
                    <canvas id="chartPie" height="140"></canvas>
                    <div class="text-muted small mt-2">
                        @*提示：選擇「自訂報表」會即時更新圖表；選「（預設報表）」回到寫死的預設資料。*@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // === 用不會與 DOM id 衝突的名稱 ===
        window._lineChart = window._lineChart || null;

        // === 工具：重畫折線圖 ===
        function renderLine(labels, data, title){
          const canvas = document.getElementById('chartLine');
          if (!canvas) { console.error('#chartLine not found'); return; }

          // 只有在「真的是 Chart 實例」時才 destroy
          if (window._lineChart && typeof window._lineChart.destroy === 'function') {
            window._lineChart.destroy();
          }

          // 直接把 canvas 傳給 Chart（Chart.js 會自己取 context）
          window._lineChart = new Chart(canvas, {
            type: 'line',
            data: { labels: labels || [], datasets: [{ label: title || '折線圖', data: data || [] }] },
            options: { responsive: true, tension: .25, scales: { y: { beginAtZero: true } } }
          });
        }
        // 追蹤目前折線圖的 BaseKind 與 顆粒度
        window._lineBaseKind   = 'sales'; // 預設圖=近30日銷售金額
        window._lineGranularity= 'day';   // 預設 granularity=day


        // === 預設（寫死）折線圖：呼叫 ReportsController.Line 回傳的 JSON ===
        async function loadLine(){
          try {
            const res = await fetch('@Url.Action("Line", "Reports", new { area = "ReportMail" })');
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
             window._lineGranularity = 'day'; // 設定顆粒度
            renderLine(json.labels, json.data, json.title || '預設折線圖');
          } catch (err) {
            console.error('loadLine failed:', err);
            renderLine([], [], '預設折線圖（載入失敗）');
          }
        }

        // === DefinitionPayload → PreviewDraft：只用 ValueJson ===
        function mapFiltersForPreview(filters){
          return (filters || []).map(f => ({
            FieldName: f.FieldName,
            Operator:  f.Operator,
            DataType:  f.DataType,
            Options:   f.Options,
            ValueJson: f.ValueJson
          }));
        }

        // === 載入「自訂圖表」：先取定義，再呼叫預覽 ===
        // ======== 折線圖（自訂） ========
          async function loadLineByDefinition(defId) {
            try {
              // 1) 取定義（關快取 + timestamp）
              const defUrl = '@Url.Action("DefinitionPayload", "ReportDefinitions", new { area = "ReportMail" })'
                            + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
              const resDef = await fetch(defUrl, { cache: 'no-store' });
              if (!resDef.ok) {
                const t = await resDef.text();
                throw new Error('DefinitionPayload HTTP ' + resDef.status + ' ' + t);
              }
              const def = await resDef.json();

              // 2) 驗證種類、取得來源
              const category = ((def.category ?? def.Category) || '').toString().trim().toLowerCase();
              if (category !== 'line') { alert('此報表不是折線圖類型'); return; }
              const kind = ((def.baseKind ?? def.BaseKind) || '').toString().trim().toLowerCase();
              if (!['sales','borrow','orders'].includes(kind)) {
                alert('此報表缺少來源類型（sales/borrow/orders），請檢查定義。');
                return;
              }

              // 3) 這裡先決定「圖例標題 = 下拉目前選到的文字 或 定義名稱」
              const ddl = document.getElementById('ddlLine');
              const pickedName = ddl?.selectedOptions?.[0]?.text?.trim();
              const defName = (def.reportName ?? def.ReportName ?? '').toString().trim();
              const viewTitle = pickedName || defName || '折線圖';

              // 4) filters 轉成後端可吃的鍵名
              const defFilters = def.filters ?? def.Filters ?? [];
              const req = {
                Category: 'line',
                BaseKind: kind,
                Filters: (defFilters || []).map(f => ({
                  FieldName:    f.fieldName    ?? f.FieldName,
                  Operator:     f.operator     ?? f.Operator,
                  DataType:     f.dataType     ?? f.DataType,
                  ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
                  DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
                  Options:      f.options      ?? f.Options ?? null
                }))
              };

              // 5) 呼叫預覽
              const prevUrl = '@Url.Action("PreviewDraft", "ReportPreview", new { area = "ReportMail" })' + '?t=' + Date.now();
              const resPrev = await fetch(prevUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
                body: JSON.stringify(req),
                cache: 'no-store'
              });
              if (!resPrev.ok) {
                // 把後端錯誤訊息露出來，之後除錯才找得到原因
                const t = await resPrev.text();
                throw new Error('PreviewDraft HTTP ' + resPrev.status + ' ' + t);
              }
              const json = await resPrev.json();

              // 6) 相容兩種回傳格式：labels/data 或 series
              let labels = [], data = [];
              if (Array.isArray(json.labels) && Array.isArray(json.data)) {
                labels = json.labels; data = json.data;
              } else {
                const s = json.series || json.Series || [];
                labels = s.map(p => p.label ?? p.name ?? '');
                data   = s.map(p => Number(p.value ?? p.y ?? 0));
              }

              // 標題優先用自訂名稱；若後端有 title 也可覆蓋
              const title = json.title || viewTitle;

              // 7) 畫圖
              renderLine(labels, data, title);
            } catch (err) {
              console.error('loadLineByDefinition failed:', err);
              // 讓使用者看到後端實際錯誤（例如：日期 ValueJson 解析失敗等）
              alert('折線圖載入失敗：' + (err?.message || err));
              renderLine([], [], '載入失敗');
            }
          }          // === 綁定：下拉切換、自訂報表的編輯/刪除導頁 ===
        (function bindLineUI(){
          const ddl     = document.getElementById('ddlLine');
          const btnEdit = document.getElementById('btnEditLine');
          const btnDel  = document.getElementById('btnDelLine');

          if (ddl){
            ddl.addEventListener('change', async (e)=>{
              const id = e.target.value;
              if (!id) await loadLine();               // 空值 → 預設
              else     await loadLineByDefinition(id); // 有選 → 自訂
            });
          }

          if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在折線圖下拉選擇一筆自訂報表'); return; }
              window.location.href = '@Url.Action("Edit", "ReportDefinitions", new { area = "ReportMail" })/' + id;
            });
          }

          if (btnDel){
            btnDel.addEventListener('click', ()=>{
              const id = (ddl && ddl.value) || '';
              if (!id){ alert('請先在折線圖下拉選擇要刪除的報表'); return; }
              window.location.href = '@Url.Action("Delete", "ReportDefinitions", new { area = "ReportMail" })/' + id;
            });
          }
        })();
        // ======== 長條圖 ========
        function renderBar(labels, data, title){
            const canvas = document.getElementById('chartBar');
            if (!canvas) return;
            if (window._barChart && typeof window._barChart.destroy === 'function') {
            window._barChart.destroy();
            }
            window._barChart = new Chart(canvas, {
            type: 'bar',
            data: { labels: labels || [], datasets: [{ label: title || '長條圖', data: data || [] }] },
            options: { responsive: true, scales: { y: { beginAtZero: true } } }
            });
        }

        // 預設長條圖（ReportsController.Bar）
        async function loadBar(){
            try{
            const res = await fetch('@apiBar');
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            renderBar(json.labels || [], json.data || [], json.title || '預設長條圖');
            }catch(err){
            console.error('loadBar failed:', err);
            renderBar([], [], '預設長條圖（載入失敗）');
            }
        }

        // 自訂（bar）：DefinitionPayload -> PreviewDraft -> 畫圖
        async function loadBarByDefinition(defId){
            try{
            // 1) 取定義
            const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
            const resDef = await fetch(defUrl, { cache: 'no-store' });
            if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
            const def = await resDef.json();

            // 2) 檢查種類/來源
            const category = ((def.category ?? def.Category) || '').toString().trim().toLowerCase();
            if (category !== 'bar'){ alert('此報表不是長條圖類型'); return; }
            const kind = ((def.baseKind ?? def.BaseKind) || '').toString().trim().toLowerCase();

            // 3) filters 轉為後端可吃的鍵名
            const defFilters = def.filters ?? def.Filters ?? [];
            const req = {
                Category: 'bar',
                BaseKind: kind,
                Filters: (defFilters || []).map(f => ({
                FieldName:    f.fieldName    ?? f.FieldName,
                Operator:     f.operator     ?? f.Operator,
                DataType:     f.dataType     ?? f.DataType,
                ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
                DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
                Options:      f.options      ?? f.Options ?? null
                }))
            };

            // 4) 預覽
            const prevUrl = '@apiPreview' + '?t=' + Date.now();
            const resPrev = await fetch(prevUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
                body: JSON.stringify(req),
                cache: 'no-store'
            });
            if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);
            const json = await resPrev.json();

            // 5) 相容兩種回傳格式：series 或 labels/data
            let labels = [], data = [], title = json.title || '長條圖';
            if (Array.isArray(json.labels) && Array.isArray(json.data)) {
                labels = json.labels; data = json.data;
            } else {
                const s = json.series || json.Series || [];
                labels = s.map(p => p.label ?? p.name ?? '');
                data   = s.map(p => Number(p.value ?? p.y ?? 0));
            }
            renderBar(labels, data, title);
            }catch(err){
            console.error('loadBarByDefinition failed:', err);
            renderBar([], [], '載入失敗');
            }
        }

        (function bindBarUI(){
            const ddl     = document.getElementById('ddlBar');
            const btnEdit = document.getElementById('btnEditBar');
            const btnDel  = document.getElementById('btnDelBar');

            if (ddl){
            ddl.addEventListener('change', ()=>{
                const id = ddl.value || '';
                if (!id) loadBar(); else loadBarByDefinition(id);
            });
            }
            if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在長條圖下拉選擇一筆自訂報表'); return; }
                window.location.href = '@urlEditDefBase/' + id;
            });
            }
            if (btnDel){
            btnDel.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在長條圖下拉選擇要刪除的自訂報表'); return; }
                window.location.href = '@urlDelDefBase/' + id;
            });
            }
        })();

        // ======== 圓餅圖 ========
        function renderPie(labels, data, title){
            const canvas = document.getElementById('chartPie');
            if (!canvas) return;
            if (window._pieChart && typeof window._pieChart.destroy === 'function') {
            window._pieChart.destroy();
            }
            window._pieChart = new Chart(canvas, {
            type: 'pie',
            data: { labels: labels || [], datasets: [{ label: title || '圓餅圖', data: data || [] }] },
            options: { responsive: true }
            });
        }

        async function loadPie(){
            try{
            const res = await fetch('@apiPie');
            if (!res.ok) throw new Error('HTTP ' + res.status);
            const json = await res.json();
            renderPie(json.labels || [], json.data || [], json.title || '預設圓餅圖');
            }catch(err){
            console.error('loadPie failed:', err);
            renderPie([], [], '預設圓餅圖（載入失敗）');
            }
        }

        async function loadPieByDefinition(defId){
            try{
            const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
            const resDef = await fetch(defUrl, { cache: 'no-store' });
            if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
            const def = await resDef.json();

            const category = ((def.category ?? def.Category) || '').toString().trim().toLowerCase();
            if (category !== 'pie'){ alert('此報表不是圓餅圖類型'); return; }
            const kind = ((def.baseKind ?? def.BaseKind) || '').toString().trim().toLowerCase();

            const defFilters = def.filters ?? def.Filters ?? [];
            const req = {
                Category: 'pie',
                BaseKind: kind,
                Filters: (defFilters || []).map(f => ({
                FieldName:    f.fieldName    ?? f.FieldName,
                Operator:     f.operator     ?? f.Operator,
                DataType:     f.dataType     ?? f.DataType,
                ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
                DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
                Options:      f.options      ?? f.Options ?? null
                }))
            };

            const prevUrl = '@apiPreview' + '?t=' + Date.now();
            const resPrev = await fetch(prevUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
                body: JSON.stringify(req),
                cache: 'no-store'
            });
            if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);
            const json = await resPrev.json();

            let labels = [], data = [], title = json.title || '圓餅圖';
            if (Array.isArray(json.labels) && Array.isArray(json.data)) {
                labels = json.labels; data = json.data;
            } else {
                const s = json.series || json.Series || [];
                labels = s.map(p => p.label ?? p.name ?? '');
                data   = s.map(p => Number(p.value ?? p.y ?? 0));
            }
            renderPie(labels, data, title);
            }catch(err){
            console.error('loadPieByDefinition failed:', err);
            renderPie([], [], '載入失敗');
            }
        }

        (function bindPieUI(){
            const ddl     = document.getElementById('ddlPie');
            const btnEdit = document.getElementById('btnEditPie');
            const btnDel  = document.getElementById('btnDelPie');

            if (ddl){
            ddl.addEventListener('change', ()=>{
                const id = ddl.value || '';
                if (!id) loadPie(); else loadPieByDefinition(id);
            });
            }
            if (btnEdit){
            btnEdit.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在圓餅圖下拉選擇一筆自訂報表'); return; }
                window.location.href = '@urlEditDefBase/' + id;
            });
            }
            if (btnDel){
            btnDel.addEventListener('click', ()=>{
                const id = (ddl && ddl.value) || '';
                if (!id){ alert('請先在圓餅圖下拉選擇要刪除的自訂報表'); return; }
                window.location.href = '@urlDelDefBase/' + id;
            });
            }
        })();

        // === 首次載入：顯示預設折線圖 ===
        document.addEventListener('DOMContentLoaded', ()=>{
            loadLine();
            loadBar();
            loadPie();
        });
    </script>
    <script>
        // 取 Chart.js 畫面上的 "當前資料"
                function getChartPayloadLine(email){
          const c = window._lineChart;
          const ddl = document.getElementById('ddlLine');
          const selectedText = ddl?.options[ddl.selectedIndex]?.text
                             || '（預設報表）近30日每日銷售金額'; //預設顯示
          return {
            Category: 'line',
            BaseKind: window._lineBaseKind,
            Granularity: window._lineGranularity,
            Title: selectedText,
            SubTitle: `匯出日期：${new Date().toLocaleString()}`,
            Labels: c?.data?.labels ?? [],
            Values: c?.data?.datasets?.[0]?.data ?? [],
            To: email
          };
        }

        function getChartPayloadBar(email){
          const c = window._barChart;
          const ddl = document.getElementById('ddlBar');
          const selectedText = ddl?.options[ddl.selectedIndex]?.text
                             || '（預設報表）近30日書籍銷售Top10'; //預設顯示
          return {
            Category: 'bar',
            Title: selectedText,
            SubTitle: `匯出日期：${new Date().toLocaleString()}`,
            Labels: c?.data?.labels ?? [],
            Values: c?.data?.datasets?.[0]?.data ?? [],
            To: email
          };
        }

        function getChartPayloadPie(email){
          const c = window._pieChart;
          const ddl = document.getElementById('ddlPie');
          const selectedText = ddl?.options[ddl.selectedIndex]?.text
                             || '（預設報表）近30日書籍借閱種類Top5'; //預設顯示
          return {
            Category: 'pie',
            Title: selectedText,
            SubTitle: `匯出日期：${new Date().toLocaleString()}`,
            Labels: c?.data?.labels ?? [],
            Values: c?.data?.datasets?.[0]?.data ?? [],
            To: email
          };
        }


        async function postExcel(payload){
          const url = '@Url.Action("SendExcel", "ReportExport", new { area = "ReportMail" })';
          const res = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type':'application/json' },
            body: JSON.stringify(payload)
          });
          if (!res.ok) {
            const t = await res.text();
            throw new Error('寄送失敗：' + t);
          }
        }

        // 綁定三顆匯出
        (function bindExportButtons(){
          const lineBtn = document.getElementById('btnExportLine');
          const barBtn  = document.getElementById('btnExportBar');
          const pieBtn  = document.getElementById('btnExportPie');

          async function askEmailAndSend(buildPayload){
            const email = prompt('請輸入要寄送的電子郵件：');
            if (!email) return;
            try{
              await postExcel(buildPayload(email));
              alert('✅ 已寄出，請到信箱查收');
            }catch(err){
              console.error(err);
              alert('❌ ' + err.message);
            }
          }

          if (lineBtn) lineBtn.addEventListener('click', ()=> askEmailAndSend(getChartPayloadLine));
          if (barBtn)  barBtn .addEventListener('click', ()=> askEmailAndSend(getChartPayloadBar));
          if (pieBtn)  pieBtn .addEventListener('click', ()=> askEmailAndSend(getChartPayloadPie));
        })();

        // 如果想改成 Bootstrap Modal：
        // 1) 在頁面加一個 <div id="mailModal"> ... input[type=email] ... </div>
        // 2) 打開時把 buildPayload 存到 window._exportBuilder
        // 3) 點「送出」時取 input 值 → postExcel(window._exportBuilder(email))
    </script>


}
