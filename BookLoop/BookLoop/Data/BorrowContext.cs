// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BookLoop.Models;

public partial class BorrowContext : DbContext
{
    public BorrowContext(DbContextOptions<BorrowContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BorrowRecord> BorrowRecords { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Listing> Listings { get; set; }

    public virtual DbSet<ListingAuthor> ListingAuthors { get; set; }

    public virtual DbSet<ListingImage> ListingImages { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<PenaltyRule> PenaltyRules { get; set; }

    public virtual DbSet<PenaltyTransaction> PenaltyTransactions { get; set; }

    public virtual DbSet<Publisher> Publishers { get; set; }

    public virtual DbSet<Reservation> Reservations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BorrowRecord>(entity =>
        {
            entity.HasKey(e => e.RecordID).HasName("PK__BorrowRe__FBDF78C906A02751");

            entity.Property(e => e.RecordID).HasColumnName("RecordID");
            entity.Property(e => e.BorrowDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ListingID).HasColumnName("ListingID");
            entity.Property(e => e.MemberID).HasColumnName("MemberID");
            entity.Property(e => e.ReservationID).HasColumnName("ReservationID");
            entity.Property(e => e.ReturnCondition).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Listing).WithMany(p => p.BorrowRecords)
                .HasForeignKey(d => d.ListingID)
                .HasConstraintName("FK_BorrowRecords_Listings");

            entity.HasOne(d => d.Member).WithMany(p => p.BorrowRecords)
                .HasForeignKey(d => d.MemberID)
                .HasConstraintName("FK_BorrowRecords_Members");

            entity.HasOne(d => d.Reservation).WithMany(p => p.BorrowRecords)
                .HasForeignKey(d => d.ReservationID)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BorrowRecords_Reservations");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK__Categori__19093A2B19F5A883");

            entity.HasIndex(e => e.Slug, "UQ__Categori__BC7B5FB659D3BB83").IsUnique();

            entity.Property(e => e.CategoryID).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ParentID).HasColumnName("ParentID");
            entity.Property(e => e.Slug)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Listing>(entity =>
        {
            entity.HasKey(e => e.ListingID).HasName("PK__Listings__BF3EBEF06B2AC06B");

            entity.Property(e => e.ListingID).HasColumnName("ListingID");
            entity.Property(e => e.CategoryID).HasColumnName("CategoryID");
            entity.Property(e => e.Condition).HasMaxLength(200);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsAvailable).HasComputedColumnSql("(case when [Status]=(0) then CONVERT([bit],(1)) else CONVERT([bit],(0)) end)", true);
            entity.Property(e => e.ISBN)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("ISBN");
            entity.Property(e => e.PublisherID).HasColumnName("PublisherID");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Category).WithMany(p => p.Listings)
                .HasForeignKey(d => d.CategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Listings_Categories");

            entity.HasOne(d => d.Publisher).WithMany(p => p.Listings)
                .HasForeignKey(d => d.PublisherID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Listings_Publishers");
        });

        modelBuilder.Entity<ListingAuthor>(entity =>
        {
            entity.HasKey(e => e.ListingAuthorID).HasName("PK__ListingA__099ADDEDD736E6BE");

            entity.Property(e => e.ListingAuthorID).HasColumnName("ListingAuthorID");
            entity.Property(e => e.AuthorName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ListingID).HasColumnName("ListingID");

            entity.HasOne(d => d.Listing).WithMany(p => p.ListingAuthors)
                .HasForeignKey(d => d.ListingID)
                .HasConstraintName("FK_ListingAuthors_Listings");
        });

        modelBuilder.Entity<ListingImage>(entity =>
        {
            entity.HasKey(e => e.ImageID).HasName("PK__ListingI__7516F4EC276D126A");

            entity.Property(e => e.ImageID).HasColumnName("ImageID");
            entity.Property(e => e.Caption).HasMaxLength(50);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.ListingID).HasColumnName("ListingID");

            entity.HasOne(d => d.Listing).WithMany(p => p.ListingImages)
                .HasForeignKey(d => d.ListingID)
                .HasConstraintName("FK_ListingImages_Listings");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.MemberID).HasName("PK__Members__0CF04B38079F55D9");

            entity.Property(e => e.MemberID).HasColumnName("MemberID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Email).HasMaxLength(254);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RowVersion)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Status).HasDefaultValue((byte)1);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UserID).HasColumnName("UserID");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PenaltyRule>(entity =>
        {
            entity.HasKey(e => e.RuleID);

            entity.HasIndex(e => e.RuleID, "UQ_PenaltyRules_RuleID").IsUnique();

            entity.Property(e => e.RuleID).HasColumnName("RuleID");
            entity.Property(e => e.ChargeType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ReasonCode)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<PenaltyTransaction>(entity =>
        {
            entity.HasKey(e => e.PenaltyID);

            entity.Property(e => e.PenaltyID).HasColumnName("PenaltyID");
            entity.Property(e => e.MemberID).HasColumnName("MemberID");
            entity.Property(e => e.RecordID).HasColumnName("RecordID");
            entity.Property(e => e.RuleID).HasColumnName("RuleID");

            entity.HasOne(d => d.Member).WithMany(p => p.PenaltyTransactions)
                .HasForeignKey(d => d.MemberID)
                .HasConstraintName("FK_PenaltyTransactions_Members");

            entity.HasOne(d => d.Record).WithMany(p => p.PenaltyTransactions)
                .HasForeignKey(d => d.RecordID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PenaltyTransactions_BorrowRecords");

            entity.HasOne(d => d.Rule).WithMany(p => p.PenaltyTransactions)
                .HasForeignKey(d => d.RuleID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PenaltyTransactions_PenaltyRules");
        });

        modelBuilder.Entity<Publisher>(entity =>
        {
            entity.HasKey(e => e.PublisherID).HasName("PK__Publishe__4C657E4BF84D66C2");

            entity.Property(e => e.PublisherID).HasColumnName("PublisherID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.PublisherName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Slug)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasKey(e => e.ReservationID).HasName("PK__Reservat__B7EE5F04042F3AC0");

            entity.HasIndex(e => new { e.ListingID, e.MemberID, e.ReservationType }, "UX_Reservations_NoDupActiveByUser")
                .IsUnique()
                .HasFilter("([Status] IN ((0), (1)))");

            entity.HasIndex(e => e.ListingID, "UX_Reservations_OneActiveHoldPerBook")
                .IsUnique()
                .HasFilter("([ReservationType]=(0) AND ([Status] IN ((0), (1))))");

            entity.HasIndex(e => e.ListingID, "UX_Reservations_OneActiveWaitlistPerBook")
                .IsUnique()
                .HasFilter("([ReservationType]=(1) AND ([Status] IN ((0), (1))))");

            entity.Property(e => e.ReservationID).HasColumnName("ReservationID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ListingID).HasColumnName("ListingID");
            entity.Property(e => e.MemberID).HasColumnName("MemberID");
            entity.Property(e => e.ReservationAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Listing).WithOne(p => p.Reservation)
                .HasForeignKey<Reservation>(d => d.ListingID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_Listings");

            entity.HasOne(d => d.Member).WithMany(p => p.Reservations)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Reservations_Members");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}