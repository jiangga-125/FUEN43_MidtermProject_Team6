@using System.Collections.Generic
@using System.Linq
@using BookLoop.Models
@{
	ViewData["Title"] = "報表主頁";
	Layout = "~/Views/Shared/_Layout.cshtml";

	// === 後端 API ===
	var apiLine = Url.Action("Line", "Reports", new { area = "ReportMail" }) ?? "#";
	var apiBar = Url.Action("Bar", "Reports", new { area = "ReportMail" }) ?? "#";
	var apiPie = Url.Action("Pie", "Reports", new { area = "ReportMail" }) ?? "#";
	var apiDefPayload = Url.Action("DefinitionPayload", "ReportDefinitions", new { area = "ReportMail" }) ?? "#";
	var apiPreview = Url.Action("PreviewDraft", "ReportPreview", new { area = "ReportMail" }) ?? "#";

	// 新增/編輯/刪除的頁面
	var urlCreateDef = Url.Action("Create", "ReportDefinitions", new { area = "ReportMail" }) ?? "#";
	var urlEditDefBase = Url.Action("Edit", "ReportDefinitions", new { area = "ReportMail" }) ?? "#"; // 之後 + /{id}

	// === 自訂報表清單 ===
	var lineList = ViewBag.LineReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
	var barList = ViewBag.BarReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
	var pieList = ViewBag.PieReports as IEnumerable<ReportDefinition> ?? Enumerable.Empty<ReportDefinition>();
}

<style>
	/* 卡片保險：任何溢出都不畫到圓角外 */
	.chart-card {
		overflow: hidden;
	}

	/* 標題一整列（位於下拉上方） */
	.chart-title {
		font-weight: 600;
		font-size: 1rem;
		line-height: 1.2;
		margin-bottom: .25rem;
	}

	/* 下拉：以 class 控制最小寬，不用 inline-style */
	.chart-select {
		min-width: 220px;
	}
	@@media (max-width: 576px) { /* 超窄手機再縮小，避免撐版 */
		.chart-select

	{
		min-width: 160px;
	}

	}

	/* 按鈕群在極窄時每顆全寬，搭配 col-6 就會形成一列兩顆 */
	.chart-actions .btn {
		white-space: nowrap;
	}
	@@media (max-width: 576px) {
		.chart-actions .btn

	{
		width: 100%;
	}

	}
</style>

<style>
	.page-title {
		padding-left: clamp(16px, 3vw, 40px);
		padding-right: clamp(16px, 3vw, 40px);
	}
</style>

<div class="container-fluid">
	<h1 class="mb-0 py-3 page-title">報表主頁</h1>
</div>
<div class="container-xxl py-3">
	<div class="row justify-content-center gx-5">
		<div class="col-12 col-lg-11 col-xxl-12">
	<!-- === 版面：左（圓餅）｜右（折線在上、長條在下） === -->
	<div class="row g-4 align-items-stretch">

		<!-- 左：圓餅圖（佔左側欄） -->
		<div class="col-12 col-md-6">
			<div class="card chart-card h-100">
				<div class="card-header py-2">
					<div class="chart-title">圓餅圖</div>

					<div class="row g-2 align-items-center">
						<div class="col-12 col-md">
							<select id="ddlPie" class="form-select form-select-sm chart-select">
								<option value="">（預設報表）近30日書籍借閱種類Top5</option>
								@foreach (var d in pieList)
								{
									<option value="@d.ReportDefinitionID">@d.ReportName</option>
								}
							</select>
						</div>

						<div class="col-12 col-md-auto ms-md-auto">
							<div class="row g-2 justify-content-md-end chart-actions">
								<div class="col-6 col-sm-auto"><button id="btnExportPie" class="btn btn-sm btn-success">匯出</button></div>
								<div class="col-6 col-sm-auto"><a class="btn btn-sm btn-primary" href="@($"{urlCreateDef}?category=pie")">新增</a></div>
								<div class="col-6 col-sm-auto"><button id="btnEditPie" class="btn btn-sm btn-outline-secondary">編輯</button></div>
								<div class="col-6 col-sm-auto"><button id="btnDelPie" class="btn btn-sm btn-outline-danger">刪除</button></div>
							</div>
						</div>
					</div>
				</div>

				<div class="card-body">
					<canvas id="chartPie" height="140"></canvas>
					<div class="text-muted small mt-2"></div>
				</div>
			</div>
		</div>

		<!-- 右：上（折線）＋下（長條） -->
		<div class="col-12 col-md-6">
			<div class="row g-4">

				<!-- 右上：折線圖 -->
				<div class="col-12">
					<div class="card chart-card h-100">
						<div class="card-header py-2">
							<div class="chart-title">折線圖</div>

							<div class="row g-2 align-items-center">
								<div class="col-12 col-md">
									<select id="ddlLine" class="form-select form-select-sm chart-select">
										<option value="">（預設報表）近30日每日銷售金額</option>
										@foreach (var d in lineList)
										{
											<option value="@d.ReportDefinitionID">@d.ReportName</option>
										}
									</select>
								</div>

								<div class="col-12 col-md-auto ms-md-auto">
									<div class="row g-2 justify-content-md-end chart-actions">
										<div class="col-6 col-sm-auto"><button id="btnExportLine" class="btn btn-sm btn-success">匯出</button></div>
										<div class="col-6 col-sm-auto"><a class="btn btn-sm btn-primary" href="@($"{urlCreateDef}?category=line")">新增</a></div>
										<div class="col-6 col-sm-auto"><button id="btnEditLine" class="btn btn-sm btn-outline-secondary">編輯</button></div>
										<div class="col-6 col-sm-auto"><button id="btnDelLine" class="btn btn-sm btn-outline-danger">刪除</button></div>
									</div>
								</div>
							</div>
						</div>

						<div class="card-body">
							<canvas id="chartLine" height="140"></canvas>
							<div class="text-muted small mt-2"></div>
						</div>
					</div>
				</div>

				<!-- 右下：長條圖 -->
				<div class="col-12">
					<div class="card chart-card h-100">
						<div class="card-header py-2">
							<div class="chart-title">長條圖</div>

							<div class="row g-2 align-items-center">
								<div class="col-12 col-md">
									<select id="ddlBar" class="form-select form-select-sm chart-select">
										<option value="">（預設報表）近30日書籍銷售Top10</option>
										@foreach (var d in barList)
										{
											<option value="@d.ReportDefinitionID">@d.ReportName</option>
										}
									</select>
								</div>

								<div class="col-12 col-md-auto ms-md-auto">
									<div class="row g-2 justify-content-md-end chart-actions">
										<div class="col-6 col-sm-auto"><button id="btnExportBar" class="btn btn-sm btn-success">匯出</button></div>
										<div class="col-6 col-sm-auto"><a class="btn btn-sm btn-primary" href="@($"{urlCreateDef}?category=bar")">新增</a></div>
										<div class="col-6 col-sm-auto"><button id="btnEditBar" class="btn btn-sm btn-outline-secondary">編輯</button></div>
										<div class="col-6 col-sm-auto"><button id="btnDelBar" class="btn btn-sm btn-outline-danger">刪除</button></div>
									</div>
								</div>
							</div>
						</div>

						<div class="card-body">
							<canvas id="chartBar" height="140"></canvas>
							<div class="text-muted small mt-2"></div>
						</div>
					</div>
				</div>

			</div>
		</div>
			</div>

		</div>
	</div>
</div>

<form id="defDeleteForm"
	  method="post"
	  action="@Url.Action("Delete", "ReportDefinitions", new { area = "ReportMail" })"
	  style="display:none">
	@Html.AntiForgeryToken()
	<input type="hidden" name="id" id="defDeleteId" />
</form>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		// === 全局狀態 ===
		window._lineChart = window._lineChart || null;
		window._barChart  = window._barChart  || null;
		window._pieChart  = window._pieChart  || null;

		// 折線：BaseKind / Granularity / Metric
		window._lineBaseKind    = window._lineBaseKind    ?? 'sales';
		window._lineGranularity = window._lineGranularity ?? 'day';
		window._lineValueMetric = window._lineValueMetric ?? 'amount';

		// 長條：BaseKind / Metric
		window._barBaseKind     = window._barBaseKind     ?? 'sales';
		window._barValueMetric  = window._barValueMetric  ?? 'quantity';

		// 圓餅：BaseKind / Metric
		window._pieBaseKind     = window._pieBaseKind     ?? 'borrow';
		window._pieValueMetric  = window._pieValueMetric  ?? 'count';

		// === Chart render ===
		function renderLine(labels, data, title){
		  const el = document.getElementById('chartLine');
		  if (!el) return;
		  if (window._lineChart && typeof window._lineChart.destroy === 'function') window._lineChart.destroy();
		  window._lineChart = new Chart(el, {
			type: 'line',
			data: { labels: labels || [], datasets: [{ label: title || '折線圖', data: data || [] }] },
			options: { responsive: true, tension: .25, scales: { y: { beginAtZero: true } } }
		  });
		}
		function renderBar(labels, data, title){
		  const el = document.getElementById('chartBar');
		  if (!el) return;
		  if (window._barChart && typeof window._barChart.destroy === 'function') window._barChart.destroy();
		  window._barChart = new Chart(el, {
			type: 'bar',
			data: { labels: labels || [], datasets: [{ label: title || '長條圖', data: data || [] }] },
			options: { responsive: true, scales: { y: { beginAtZero: true } } }
		  });
		}
		function renderPie(labels, data, title){
		  const el = document.getElementById('chartPie');
		  if (!el) return;
		  if (window._pieChart && typeof window._pieChart.destroy === 'function') window._pieChart.destroy();
		  window._pieChart = new Chart(el, {
			type: 'pie',
			data: { labels: labels || [], datasets: [{ label: title || '圓餅圖', data: data || [] }] },
			options: { responsive: true }
		  });
		}

		// === 通用工具 ===

		// 取 Anti-Forgery token（從上面的隱藏表單）
		function getAfToken(){
		  return document.querySelector('#defDeleteForm input[name="__RequestVerificationToken"]')?.value || '';
		}

		// AJAX 刪除：POST /ReportDefinitions/Delete（form-url-encoded）
		async function deleteDefinitionAjax(defId){
		  if(!defId) throw new Error('缺少 id');
		  const url   = '@Url.Action("Delete", "ReportDefinitions", new { area = "ReportMail" })';
		  const token = getAfToken();
		  const body  = new URLSearchParams({ id: defId, __RequestVerificationToken: token });

		  const res = await fetch(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'RequestVerificationToken': token },
			body
		  });
		  // 多數情況後端會 RedirectToAction，fetch 會跟到 200；保守起見 2xx/3xx 都視為成功
		  if (!(res.status >= 200 && res.status < 400)) {
			const t = await res.text().catch(()=> '');
			throw new Error(`刪除失敗（HTTP ${res.status}）${t ? '：' + t : ''}`);
		  }
		}

		// 從下拉移除 option，並依目前選擇刷新該張圖
		async function removeOptionAndRefresh(selectId, deletedId, category){
		  const ddl = document.getElementById(selectId);
		  if (!ddl) return;

		  // 先記錄刪除前是否選中被刪那筆
		  const wasSelected = ddl.value === String(deletedId);

		  // 移除那個 option
		  const opt = ddl.querySelector(`option[value="${CSS.escape(String(deletedId))}"]`);
		  if (opt) opt.remove();

		  // 決定刷新什麼
		  // 規則：如果刪的是當前選中 → 回到「預設」（value=''）並載入預設圖；
		  //       否則維持目前選中值（若有）重新載入自訂；沒有就載入預設。
		  if (wasSelected) ddl.value = '';

		  const current = ddl.value || '';

		  if (category === 'line') {
			if (!current) await loadLine(); else await loadLineByDefinition(current);
		  } else if (category === 'bar') {
			if (!current) await loadBar(); else await loadBarByDefinition(current);
		  } else if (category === 'pie') {
			if (!current) await loadPie(); else await loadPieByDefinition(current);
		  }
		}
		const lower = s => (s ?? '').toString().trim().toLowerCase();

		// 顆粒度同步：支援兩種來源（專用 Granularity 濾鏡；或「日期型」濾鏡的 ValueJson.gran）
		function trySyncGranularityFromFilters(filters){
		  try{
			// 1) 專用 Granularity 濾鏡
			const g1 = (filters||[]).find(f => {
			  const n = lower(f.FieldName ?? f.fieldName);
			  return n === 'granularity' || n === 'dategranularity';
			});
			if (g1){
			  const raw = g1.ValueJson ?? g1.valueJson ?? '{}';
			  try{
				const j = typeof raw === 'string' ? JSON.parse(raw) : raw;
				const v = lower((j?.value ?? j));
				if (['year','month','day'].includes(v)) { window._lineGranularity = v; return true; }
			  }catch{
				const v = lower(String(raw));
				if (['year','month','day'].includes(v)) { window._lineGranularity = v; return true; }
			  }
			}

			// 2) 日期型濾鏡（DataType: 'date' 或 欄位名以 *Date 結尾），ValueJson 內含 gran / granularity / groupBy
			const g2 = (filters||[]).find(f => {
			  const dt = lower(f.DataType ?? f.dataType);
			  const n  = lower(f.FieldName ?? f.fieldName);
			  return dt === 'date' || n.endsWith('date');
			});
			if (g2){
			  const raw = g2.ValueJson ?? g2.valueJson ?? '{}';
			  let gVal = null;
			  try{
				const j = typeof raw === 'string' ? JSON.parse(raw) : raw;
				const cand = (j?.gran ?? j?.granularity ?? j?.groupBy ?? j?.groupby);
				if (typeof cand === 'string') gVal = lower(cand);
			  }catch{
				// 候補：raw 非 JSON 時以字串搜尋關鍵字
				const s = lower(String(raw));
				if (s.includes('year'))  gVal = 'year';
				else if (s.includes('month')) gVal = 'month';
				else if (s.includes('day'))   gVal = 'day';
			  }
			  if (['year','month','day'].includes(gVal)){
				window._lineGranularity = gVal;
				return true;
			  }
			}
			return false;
		  }catch{ return false; }
		}

		// 同步 Metric（amount/count/quantity）
		function trySyncMetricFromFilters(filters, setter){
		  try{
			const mf = (filters||[]).find(f => lower(f.FieldName ?? f.fieldName) === 'metric');
			if (!mf) return false;
			const raw = mf.ValueJson ?? mf.valueJson ?? '{}';
			let metric = null;
			try{
			  const j = typeof raw === 'string' ? JSON.parse(raw) : raw;
			  const v = lower((j?.value ?? j));
			  if (['amount','count','quantity'].includes(v)) metric = v;
			}catch{
			  const v = lower(String(raw));
			  if (['amount','count','quantity'].includes(v)) metric = v;
			}
			if (metric){ setter(metric); return true; }
			return false;
		  }catch{ return false; }
		}

		// === 預設三張圖 ===
		async function loadLine(){
		  try{
			const res = await fetch('@apiLine', { cache: 'no-store' });
			if (!res.ok) throw new Error('HTTP ' + res.status);
			const json = await res.json();
			window._lineBaseKind    = 'sales';
			window._lineGranularity = 'day';
			window._lineValueMetric = 'amount';
			renderLine(json.labels||[], json.data||[], json.title||'預設折線圖');
		  }catch(e){
			console.error(e); renderLine([], [], '預設折線圖（載入失敗）');
		  }
		}
		async function loadBar(){
		  try{
			const res = await fetch('@apiBar', { cache: 'no-store' });
			if (!res.ok) throw new Error('HTTP ' + res.status);
			const json = await res.json();
			window._barBaseKind    = 'sales';
			window._barValueMetric = 'quantity';
			renderBar(json.labels||[], json.data||[], json.title||'預設長條圖');
		  }catch(e){
			console.error(e); renderBar([], [], '預設長條圖（載入失敗）');
		  }
		}
		async function loadPie(){
		  try{
			const res = await fetch('@apiPie', { cache: 'no-store' });
			if (!res.ok) throw new Error('HTTP ' + res.status);
			const json = await res.json();
			window._pieBaseKind    = 'borrow';
			window._pieValueMetric = 'count';
			renderPie(json.labels||[], json.data||[], json.title||'預設圓餅圖');
		  }catch(e){
			console.error(e); renderPie([], [], '預設圓餅圖（載入失敗）');
		  }
		}

		// === 自訂：DefinitionPayload → PreviewDraft → 畫圖 ===
		async function loadLineByDefinition(defId){
		  try{
			// 1) 定義
			const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
			const resDef = await fetch(defUrl, { cache: 'no-store' });
			if (!resDef.ok){ throw new Error('DefinitionPayload HTTP ' + resDef.status + ' ' + await resDef.text()); }
			const def = await resDef.json();

			// 2) 種類/來源
			const category = lower(def.category ?? def.Category);
			if (category !== 'line'){ alert('此報表不是折線圖類型'); return; }
			const kind = lower(def.baseKind ?? def.BaseKind);
			if (!['sales','borrow','orders'].includes(kind)){ alert('缺少來源類型'); return; }
			window._lineBaseKind = kind;

			// 3) 標題
			const ddl = document.getElementById('ddlLine');
			const pickedName = ddl?.selectedOptions?.[0]?.text?.trim();
			const defName = (def.reportName ?? def.ReportName ?? '').toString().trim();
			const viewTitle = pickedName || defName || '折線圖';

			// 4) Filters
			const defFilters = def.filters ?? def.Filters ?? [];
			const req = {
			  Category: 'line',
			  BaseKind: kind,
			  Filters: (defFilters||[]).map(f => ({
				FieldName:    f.fieldName    ?? f.FieldName,
				Operator:     f.operator     ?? f.Operator,
				DataType:     f.dataType     ?? f.DataType,
				ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
				DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
				Options:      f.options      ?? f.Options ?? null
			  }))
			};
			// ← 這裡就會正確抓到 gran（從日期型濾鏡的 ValueJson.gran）
			trySyncGranularityFromFilters(defFilters);
			trySyncMetricFromFilters(defFilters, m => { window._lineValueMetric = m; });

			// 5) 預覽
			const resPrev = await fetch('@apiPreview' + '?t=' + Date.now(), {
			  method: 'POST',
			  headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
			  body: JSON.stringify(req),
			  cache: 'no-store'
			});
			if (!resPrev.ok){ throw new Error('PreviewDraft HTTP ' + resPrev.status + ' ' + await resPrev.text()); }
			const json = await resPrev.json();

			// 回應 echo.filters 再同步一次（以回應為準）
			if (json?.echo?.filters) {
			  trySyncGranularityFromFilters(json.echo.filters);
			  trySyncMetricFromFilters(json.echo.filters, m => { window._lineValueMetric = m; });
			}

			// 6) 畫圖
			let labels = [], data = [];
			if (Array.isArray(json.labels) && Array.isArray(json.data)) {
			  labels = json.labels; data = json.data;
			} else {
			  const s = json.series || json.Series || [];
			  labels = s.map(p => p.label ?? p.name ?? '');
			  data   = s.map(p => Number(p.value ?? p.y ?? 0));
			}
			renderLine(labels, data, json.title || viewTitle);
		  }catch(err){
			console.error('loadLineByDefinition failed:', err);
			alert('折線圖載入失敗：' + (err?.message || err));
			renderLine([], [], '載入失敗');
		  }
		}

		async function loadBarByDefinition(defId){
		  try{
			const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
			const resDef = await fetch(defUrl, { cache: 'no-store' });
			if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
			const def = await resDef.json();

			const category = lower(def.category ?? def.Category);
			if (category !== 'bar'){ alert('此報表不是長條圖類型'); return; }
			const kind = lower(def.baseKind ?? def.BaseKind);
			window._barBaseKind = kind || 'sales';

			const defFilters = def.filters ?? def.Filters ?? [];
			trySyncMetricFromFilters(defFilters, m => { window._barValueMetric = m; });

			const req = {
			  Category: 'bar',
			  BaseKind: window._barBaseKind,
			  Filters: (defFilters||[]).map(f => ({
				FieldName:    f.fieldName    ?? f.FieldName,
				Operator:     f.operator     ?? f.Operator,
				DataType:     f.dataType     ?? f.DataType,
				ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
				DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
				Options:      f.options      ?? f.Options ?? null
			  }))
			};

			const resPrev = await fetch('@apiPreview' + '?t=' + Date.now(), {
			  method: 'POST', headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
			  body: JSON.stringify(req), cache: 'no-store'
			});
			if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);
			const json = await resPrev.json();

			if (json?.echo?.filters) {
			  trySyncMetricFromFilters(json.echo.filters, m => { window._barValueMetric = m; });
			}

			let labels=[], data=[], title=json.title||'長條圖';
			if (Array.isArray(json.labels) && Array.isArray(json.data)) {
			  labels = json.labels; data = json.data;
			} else {
			  const s = json.series || json.Series || [];
			  labels = s.map(p => p.label ?? p.name ?? '');
			  data   = s.map(p => Number(p.value ?? p.y ?? 0));
			}
			renderBar(labels, data, title);
		  }catch(err){
			console.error('loadBarByDefinition failed:', err);
			renderBar([], [], '載入失敗');
		  }
		}

		async function loadPieByDefinition(defId){
		  try{
			const defUrl = '@apiDefPayload' + '?id=' + encodeURIComponent(defId) + '&t=' + Date.now();
			const resDef = await fetch(defUrl, { cache: 'no-store' });
			if (!resDef.ok) throw new Error('DefinitionPayload HTTP ' + resDef.status);
			const def = await resDef.json();

			const category = lower(def.category ?? def.Category);
			if (category !== 'pie'){ alert('此報表不是圓餅圖類型'); return; }
			const kind = lower(def.baseKind ?? def.BaseKind);
			window._pieBaseKind = kind || 'borrow';

			const defFilters = def.filters ?? def.Filters ?? [];
			trySyncMetricFromFilters(defFilters, m => { window._pieValueMetric = m; });

			const req = {
			  Category: 'pie',
			  BaseKind: window._pieBaseKind,
			  Filters: (defFilters||[]).map(f => ({
				FieldName:    f.fieldName    ?? f.FieldName,
				Operator:     f.operator     ?? f.Operator,
				DataType:     f.dataType     ?? f.DataType,
				ValueJson:    f.valueJson    ?? f.ValueJson ?? null,
				DefaultValue: f.defaultValue ?? f.DefaultValue ?? null,
				Options:      f.options      ?? f.Options ?? null
			  }))
			};

			const resPrev = await fetch('@apiPreview' + '?t=' + Date.now(), {
			  method: 'POST', headers: { 'Content-Type': 'application/json', 'Cache-Control': 'no-store' },
			  body: JSON.stringify(req), cache: 'no-store'
			});
			if (!resPrev.ok) throw new Error('PreviewDraft HTTP ' + resPrev.status);
			const json = await resPrev.json();

			if (json?.echo?.filters) {
			  trySyncMetricFromFilters(json.echo.filters, m => { window._pieValueMetric = m; });
			}

			let labels=[], data=[], title=json.title||'圓餅圖';
			if (Array.isArray(json.labels) && Array.isArray(json.data)) {
			  labels = json.labels; data = json.data;
			} else {
			  const s = json.series || json.Series || [];
			  labels = s.map(p => p.label ?? p.name ?? '');
			  data   = s.map(p => Number(p.value ?? p.y ?? 0));
			}
			renderPie(labels, data, title);
		  }catch(err){
			console.error('loadPieByDefinition failed:', err);
			renderPie([], [], '載入失敗');
		  }
		}

		// === 綁定 ===

		//折線圖
		(function bindLineUI(){
		  const ddl = document.getElementById('ddlLine');
		  const btnEdit = document.getElementById('btnEditLine');
		  const btnDel  = document.getElementById('btnDelLine');

		  if (ddl){
			ddl.addEventListener('change', async (e)=>{
			  const id = e.target.value;
			  if (!id) await loadLine(); else await loadLineByDefinition(id);
			});
		  }
		  if (btnEdit){
			btnEdit.addEventListener('click', ()=>{
			  const id = (ddl && ddl.value) || '';
			  if (!id){ alert('請先在折線圖下拉選擇一筆自訂報表'); return; }
			  window.location.href = '@urlEditDefBase/' + id;
			});
		  }
		  if (btnDel){
		  btnDel.addEventListener('click', async ()=>{
			const id = (ddl && ddl.value) || '';
			if (!id){ alert('請先在折線圖下拉選擇要刪除的自訂報表'); return; }
			if (!confirm('確定要刪除此自訂報表嗎？此動作無法復原。')) return;

			try{
			  await deleteDefinitionAjax(id);
			  await removeOptionAndRefresh('ddlLine', id, 'line');  // 僅刷新折線圖卡片
			  alert('✅ 已刪除');
			}catch(err){
			  console.error(err);
			  alert('❌ ' + (err?.message || err));
			}
		  });
		}

		})();

		//長條圖
		(function bindBarUI(){
		  const ddl = document.getElementById('ddlBar');
		  const btnEdit = document.getElementById('btnEditBar');
		  const btnDel  = document.getElementById('btnDelBar');
		  if (ddl){
			ddl.addEventListener('change', ()=>{
			  const id = ddl.value || '';
			  if (!id) loadBar(); else loadBarByDefinition(id);
			});
		  }
		  if (btnEdit){
			btnEdit.addEventListener('click', ()=>{
			  const id = (ddl && ddl.value) || '';
			  if (!id){ alert('請先在長條圖下拉選擇一筆自訂報表'); return; }
			  window.location.href = '@urlEditDefBase/' + id;
			});
		  }
		if (btnDel){
		  btnDel.addEventListener('click', async ()=>{
			const id = (ddl && ddl.value) || '';
			if (!id){ alert('請先在長條圖下拉選擇要刪除的自訂報表'); return; }
			if (!confirm('確定要刪除此自訂報表嗎？此動作無法復原。')) return;

			try{
			  await deleteDefinitionAjax(id);
			  await removeOptionAndRefresh('ddlBar', id, 'bar');    // 僅刷新長條圖卡片
			  alert('✅ 已刪除');
			}catch(err){
			  console.error(err);
			  alert('❌ ' + (err?.message || err));
			}
		  });
		}
		})();
		
		//圓餅圖
		(function bindPieUI(){
		  const ddl = document.getElementById('ddlPie');
		  const btnEdit = document.getElementById('btnEditPie');
		  const btnDel  = document.getElementById('btnDelPie');
		  if (ddl){
			ddl.addEventListener('change', ()=>{
			  const id = ddl.value || '';
			  if (!id) loadPie(); else loadPieByDefinition(id);
			});
		  }
		  if (btnEdit){
			btnEdit.addEventListener('click', ()=>{
			  const id = (ddl && ddl.value) || '';
			  if (!id){ alert('請先在圓餅圖下拉選擇一筆自訂報表'); return; }
			  window.location.href = '@urlEditDefBase/' + id;
			});
		  }
		if (btnDel){
		  btnDel.addEventListener('click', async ()=>{
			const id = (ddl && ddl.value) || '';
			if (!id){ alert('請先在圓餅圖下拉選擇要刪除的自訂報表'); return; }
			if (!confirm('確定要刪除此自訂報表嗎？此動作無法復原。')) return;

			try{
			  await deleteDefinitionAjax(id);
			  await removeOptionAndRefresh('ddlPie', id, 'pie');    // 僅刷新圓餅圖卡片
			  alert('✅ 已刪除');
			}catch(err){
			  console.error(err);
			  alert('❌ ' + (err?.message || err));
			}
		  });
		}

		})();

		// === 首次載入 ===
		document.addEventListener('DOMContentLoaded', ()=>{
		  loadLine(); loadBar(); loadPie();
		});
	</script>

	<script>
		// === 匯出 payload ===
		function getChartPayloadLine(email){
		  const c = window._lineChart;
		  const ddl = document.getElementById('ddlLine');
		  const selectedText = ddl?.options[ddl.selectedIndex]?.text
							 || '（預設報表）近30日每日銷售金額';
		  return {
			Category:    'line',
			BaseKind:    window._lineBaseKind,
			Granularity: window._lineGranularity,  // ← 這裡會是 year / month / day
			ValueMetric: window._lineValueMetric,  // amount / count / quantity
			Title:       selectedText,
			SubTitle:    `匯出日期：${new Date().toLocaleString()}`,
			Labels:      c?.data?.labels ?? [],
			Values:      c?.data?.datasets?.[0]?.data ?? [],
			To:          email
		  };
		}

		function getChartPayloadBar(email){
		  const c = window._barChart;
		  const ddl = document.getElementById('ddlBar');
		  const selectedText = ddl?.options[ddl.selectedIndex]?.text
							 || '（預設報表）近30日書籍銷售Top10';
		  return {
			Category:    'bar',
			BaseKind:    window._barBaseKind,
			ValueMetric: window._barValueMetric,
			Title:       selectedText,
			SubTitle:    `匯出日期：${new Date().toLocaleString()}`,
			Labels:      c?.data?.labels ?? [],
			Values:      c?.data?.datasets?.[0]?.data ?? [],
			To:          email
		  };
		}

		function getChartPayloadPie(email){
		  const c = window._pieChart;
		  const ddl = document.getElementById('ddlPie');
		  const selectedText = ddl?.options[ddl.selectedIndex]?.text
							 || '（預設報表）近30日書籍借閱種類Top5';
		  return {
			Category:    'pie',
			BaseKind:    window._pieBaseKind,
			ValueMetric: window._pieValueMetric,
			Title:       selectedText,
			SubTitle:    `匯出日期：${new Date().toLocaleString()}`,
			Labels:      c?.data?.labels ?? [],
			Values:      c?.data?.datasets?.[0]?.data ?? [],
			To:          email
		  };
		}

		async function postExcel(payload){
		  const url = '@Url.Action("SendExcel", "ReportExport", new { area = "ReportMail" })';
		  const res = await fetch(url, {
			method: 'POST', headers: { 'Content-Type':'application/json' }, body: JSON.stringify(payload)
		  });
		  if (!res.ok) throw new Error('寄送失敗：' + await res.text());
		}

		(function bindExportButtons(){
		  const lineBtn = document.getElementById('btnExportLine');
		  const barBtn  = document.getElementById('btnExportBar');
		  const pieBtn  = document.getElementById('btnExportPie');

		  async function askEmailAndSend(buildPayload){
			const email = prompt('請輸入要寄送的電子郵件：');
			if (!email) return;
			try{ await postExcel(buildPayload(email)); alert('✅ 已寄出，請到信箱查收'); }
			catch(err){ console.error(err); alert('❌ ' + err.message); }
		  }

		  if (lineBtn) lineBtn.addEventListener('click', ()=> askEmailAndSend(getChartPayloadLine));
		  if (barBtn)  barBtn .addEventListener('click', ()=> askEmailAndSend(getChartPayloadBar));
		  if (pieBtn)  pieBtn .addEventListener('click', ()=> askEmailAndSend(getChartPayloadPie));
		})();
	</script>
}
